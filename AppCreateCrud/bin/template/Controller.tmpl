package com.dev.template_crud.controller;

import java.util.*;
import org.springframework.data.domain.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import com.dev.template_crud.model.*;
import com.dev.template_crud.service.*;

@Controller
@RequestMapping("/[nameEntity]")
public class [nameEntityMaj]Controller {
	
	@Autowired
	private [nameEntityMaj]Service [nameEntity]Service;

    [AutowiredchildEntity]
	

    @GetMapping(value = "/list")
    public String list[nameEntityMaj]s(Model model, @RequestParam(value = "page", defaultValue = "1") int pageNumber) {
    	int ROW_PER_PAGE = 3;
    	
    	Pageable pageable = PageRequest.of(pageNumber - 1, ROW_PER_PAGE);
        Page<[nameEntityMaj]> list[nameEntityMaj] = [nameEntity]Service.listPaginated(pageable);
        
        int count = [nameEntity]Service.count();
        boolean hasPrev = pageNumber > 1;
        boolean hasNext = (pageNumber * ROW_PER_PAGE) < count;
        model.addAttribute("[nameEntity]s", list[nameEntityMaj].getContent());
        model.addAttribute("hasPrev", hasPrev);
        model.addAttribute("prev", pageNumber - 1);
        model.addAttribute("hasNext", hasNext);
        model.addAttribute("next", pageNumber + 1);
        return "[nameEntity]-list";
    }  

    @GetMapping("/add")
    public String showFormForAdd(Model theModel) {
        [nameEntityMaj] [nameEntity] = new [nameEntityMaj]();
        theModel.addAttribute("[nameEntity]", [nameEntity]);
        [AttributeChildEntity]
        return "[nameEntity]-form";
    }

    @PostMapping("/add")
    public String save(@ModelAttribute("[nameEntity]") [nameEntityMaj] [nameEntity] [RequestParamChildEntityInAdd]) {
        [setChildEntityInAdd]

        [nameEntity]Service.add([nameEntity]);

        return "redirect:/[nameEntity]/list";
    }

    private boolean isAnyFieldNullOrEmpty([nameEntityMaj] [nameEntity]) {
    	if ([isAnyFieldNullOrEmpty]) {
    		return true;
		} else {
			return false;
		}
    } 

    @PostMapping("/update/{id}")
    public String update(Model theModel, @PathVariable("id") [idType] theId, @ModelAttribute("[nameEntity]") [nameEntityMaj] [nameEntity] [RequestParamChildEntityInUpdate]) throws Exception {
        [nameEntity].setId(theId);
        [setChildEntityInUpdate]
        // Check if any field of the produit object is null or empty
        if (isAnyFieldNullOrEmpty([nameEntity])) {
            String errorMessage = "Some fields are null or empty.";
            theModel.addAttribute("errorMessage", errorMessage);
            [nameEntityMaj] [nameEntity]Detail = [nameEntity]Service.detail(theId);
            theModel.addAttribute("[nameEntity]", [nameEntity]Detail);
            return "redirect:/[nameEntity]/list";
        }
        else {
        	this.[nameEntity]Service.update([nameEntity], theId);
        }
        return "redirect:/[nameEntity]/list";
    }
    
    @GetMapping("/update/{id}")
    public String showFormForUpdate(Model theModel, @PathVariable("id") [idType] theId) {
        try {
            [nameEntityMaj] [nameEntity] = [nameEntity]Service.detail(theId);
            theModel.addAttribute("[nameEntity]", [nameEntity]);
            [AttributeChildEntity]
        } catch (Exception ex) {
            theModel.addAttribute("errorMessage", ex.getMessage());
        }
        return "[nameEntity]-edit-form";
    }

    @GetMapping("/detail/{id}")
    public String showDetail(Model theModel, @PathVariable("id") [idType] id) {
        try {
            [nameEntityMaj] [nameEntity] = [nameEntity]Service.detail(id);
            theModel.addAttribute("[nameEntity]", [nameEntity]);
        } catch (Exception ex) {
            theModel.addAttribute("errorMessage", ex.getMessage());
        }
        return "[nameEntity]-detail";
    }

    @GetMapping("/delete/{id}")
    public String delete[nameEntityMaj](@PathVariable("id") [idType] theId) {
        [nameEntity]Service.delete(theId);
        return "redirect:/[nameEntity]/list";
    }
    [supplementMethods]
}
